// Code generated by go-bindata.
// sources:
// js/console.js
// js/registry.js
// js/setup.js
// DO NOT EDIT!

package v8dispatcher

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _jsConsoleJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x52\xc1\x6e\xdb\x30\x0c\x3d\xcf\x5f\x41\x18\x03\x6a\x27\x85\xbd\x73\xb3\x9e\x86\x62\xd8\x30\x74\x87\xee\x56\xf4\xa0\xd8\x94\xcc\xc5\x96\x02\x89\xea\x56\x14\xf9\xf7\x91\x4e\x03\xbb\xd7\xe9\x60\xc2\xef\x89\xef\xf1\xd1\x6e\x37\x05\x6c\xe0\xd7\x40\x09\x2c\x8d\x08\x52\x53\xde\xff\xc6\x8e\x81\x03\xf0\x80\xc0\x18\xa7\x04\xc6\xf7\xd0\x05\xdf\x13\x53\xf0\x09\x7a\xb4\xe4\xb1\x07\xf2\xda\x3e\x77\x5e\xfd\xf8\xf6\xe5\xee\xfe\xe1\xae\xe1\xbf\x7c\x75\x0d\x7f\x06\xea\x06\x95\x3b\x9a\xc8\x10\xac\x68\xa9\x76\xc8\xb1\x43\x51\xea\x51\x88\xee\x60\x1c\x36\xa2\xa0\x22\x26\xf3\x10\xe2\x0d\xe0\x44\xdd\x61\x44\x12\xac\x2d\xda\x56\x5d\x53\x38\x4f\x96\x93\x58\xda\x10\xc1\x21\x33\x79\x07\x63\x70\x80\x9e\x23\x61\x92\x51\xc0\x28\xe0\x30\x42\xf0\xf3\xe8\x5f\x03\x24\xea\xc5\xa1\x6d\x8b\x8b\xcc\x2d\xbc\x9e\x76\x97\xb7\xe6\x18\xc9\xb3\x60\x36\xfb\x4e\x93\x55\x35\xbc\x16\x20\xe7\xd9\x44\x98\x92\x13\xaa\x2c\x77\x33\xa2\xbe\x95\xc2\x24\xe0\xa7\x9d\x94\xcf\x60\xa2\xcb\x93\x0c\x90\x9a\x11\xbd\xe3\x41\xd0\xed\xf6\x22\xa1\x47\x25\xb6\xb7\xcb\xbd\x47\x7a\x82\x2d\x94\x50\x95\x52\xf8\xe5\x88\xc1\x56\x6b\xb2\x56\xb6\x86\x37\xcb\xd3\xfc\xfc\x38\x0f\x59\x89\x54\x5d\x9c\x0a\x5d\x89\xc6\x66\x73\x90\xd0\x46\x07\x25\xb3\x97\x60\x3e\x4f\x7b\x8d\x6e\x17\xb7\x55\xee\x46\x7b\x56\x39\xa1\xdd\x2c\xf7\x64\xd3\xb0\x0e\x2e\x44\x92\xcb\x8f\x4f\xe7\x31\xc4\xd1\x8e\x86\x19\x65\xc3\xe3\xb8\xb4\x7d\xf8\xff\xbd\xa8\x43\x73\xcc\x69\x78\x9f\xfe\x5d\xec\x84\xbe\xaf\xbe\x3f\xfc\xbc\x6f\x92\x7c\x61\xef\xc8\xbe\x54\x8b\x42\x19\xb1\x43\x7a\xc6\x58\xde\x40\xf9\x16\xb2\xbc\x5e\xe8\x84\xa3\xfc\xc4\x61\xa6\x25\xfb\x9a\x52\x73\x81\xb5\x9c\xfd\x6a\x31\x3e\x15\xff\x02\x00\x00\xff\xff\x5e\x37\xa5\xd2\x0b\x03\x00\x00")

func jsConsoleJsBytes() ([]byte, error) {
	return bindataRead(
		_jsConsoleJs,
		"js/console.js",
	)
}

func jsConsoleJs() (*asset, error) {
	bytes, err := jsConsoleJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/console.js", size: 779, mode: os.FileMode(420), modTime: time.Unix(1453531099, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsRegistryJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x52\x4d\x6f\xda\x40\x10\xbd\xfb\x57\xcc\xa9\x18\x04\x5e\x50\xd2\x28\x02\xa1\x1e\xda\x1c\x2a\xb5\xbd\xa4\xea\x25\x8a\xaa\x65\x3d\xb6\x37\xe0\x5d\x77\x77\x4c\x40\x81\xff\xde\xd9\x8d\x4d\x2d\xa5\xd9\xc3\x18\xe6\xe3\xcd\xbc\x37\x23\x26\x09\x4c\xe0\x67\xa5\x3d\x14\x7a\x87\xc0\x5f\xdf\x6e\x9e\x50\x11\x90\x05\xaa\x10\x08\x5d\xed\x41\x9a\x1c\x94\x35\xb9\x26\x6d\x8d\x87\x1c\x0b\x6d\x30\x07\x6d\x42\x79\xac\x1c\x7d\xfb\xfa\xf9\xee\xc7\xfd\x5d\x46\x07\x1a\x4d\xe1\xb9\xd2\xaa\x0a\x70\x8d\x74\x04\xb6\x60\xac\x80\x6d\x5b\xa7\x90\x91\x72\xe4\x80\xda\xca\x12\x33\x46\x08\x20\xb2\xa5\xca\xba\x25\x60\xad\xd5\x76\x87\x9a\x7d\x22\xd9\x4b\x07\xbf\x6e\xbf\xc0\x3a\xda\xd3\x09\x5e\xce\xab\x24\x11\x02\x2a\xa2\x66\x29\x84\x27\x06\xb1\x7b\x74\xc5\xce\x3e\x67\xca\xd6\xe2\x4f\x8b\x3e\xce\x28\x16\xf3\x8f\xf3\xab\x6b\xa1\x1c\x4a\xc2\x59\xd9\xea\x7c\xd6\x06\xa3\xcd\xec\x49\xee\xa5\x57\x4e\x37\x94\x30\x6e\x16\xdc\xdc\xa2\x68\x8d\x0a\xa5\xe9\x18\x5e\x12\xe0\xe7\x90\x5a\x67\x60\x74\xe8\xde\x2c\x9a\xeb\x60\x8e\xfd\xdf\xfe\x8d\x32\x87\xcd\x4e\x2a\x4c\xc5\xc3\xe1\xf8\x28\xca\xe9\x3f\x3c\xd5\x03\x86\x17\x28\x39\xee\xf6\x5d\x52\x95\x39\xd6\xd5\xd6\xdc\x70\x02\x8b\x1b\x38\xc1\x7c\x7a\xc9\x8b\xb9\x9c\xa7\x60\xbd\xe6\x11\x46\xf0\x89\xcb\x96\x90\x3a\xf8\x00\xf3\xc3\x55\x48\x3e\xdc\x8e\x57\x97\xfc\x6e\xd8\x7d\x46\xf6\x9e\x9c\x36\x65\xba\xb8\xe9\xc2\x67\xfe\x9e\xa3\x6c\xfd\x48\xbf\x1d\x96\xda\x93\x3b\xc2\x16\xb1\xf1\xa0\x73\x34\xa4\x8b\xa3\xdc\xf0\x26\xd3\xcd\x11\x4a\x34\xe8\x58\x37\x5e\x71\x3e\xbe\x94\x79\xc6\x88\x8a\xbd\xc5\x59\xc7\xd5\xfc\x37\x96\x19\x6b\x90\x13\x5a\xd3\x9d\xcd\x7b\x79\x4d\x4b\xc3\x35\x84\x1f\xbd\x72\x51\x35\x2c\x5e\x0f\x21\x2e\x2c\xed\xc8\x85\xbb\x7a\xe0\xd0\x63\x57\xba\x1a\xae\x8e\xfd\x3d\x75\x92\x5b\xec\xdc\x3e\x1e\x76\xdf\x07\x98\xae\x26\x1f\x72\xd1\xa1\xe1\xf3\x0c\xc7\xee\xb0\xe6\xbb\x62\x65\x08\x0a\x67\xeb\x58\x71\x19\xf4\x5d\x19\xb2\xd8\x65\xc0\x81\x41\x87\x14\x82\x9f\xc3\x97\x99\xdf\x52\x18\x88\x34\xe0\xf1\x4a\xec\x9c\xfc\x0d\x00\x00\xff\xff\xc0\x47\x25\x7f\xaf\x03\x00\x00")

func jsRegistryJsBytes() ([]byte, error) {
	return bindataRead(
		_jsRegistryJs,
		"js/registry.js",
	)
}

func jsRegistryJs() (*asset, error) {
	bytes, err := jsRegistryJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/registry.js", size: 943, mode: os.FileMode(420), modTime: time.Unix(1453531107, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsSetupJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x56\xdf\x6f\xe3\x36\x0c\x7e\xf7\x5f\xc1\x19\x05\xce\x69\x03\x67\x3f\x5e\x86\x66\xc5\x1e\xae\xc5\x70\x87\xad\x05\x2e\xc5\x5e\x8a\x60\x50\x6d\x3a\xd1\xd5\x91\x0c\x49\x6e\x1b\xdc\xe5\x7f\x1f\x29\x5b\xb6\xda\x66\xcd\x06\x74\x03\x96\x87\x24\x30\xc5\x8f\xe4\x47\xf2\x93\x67\xc7\x09\x1c\xc3\xf5\x5a\x5a\xa8\x64\x8d\x40\xbf\xb6\xbd\xfd\x8c\x85\x03\xa7\xc1\xad\x11\x1c\x9a\x8d\x05\xa1\x4a\x28\xb4\x2a\xa5\x93\x5a\x59\x28\xb1\x92\x0a\x4b\x90\x8a\xdd\xbd\xe7\xbb\x5f\x3f\xbc\xbf\xb8\x5c\x5c\xe4\xee\xd1\xbd\x9b\xc2\xc3\x5a\x16\x6b\x86\x6b\x84\x71\xa0\x2b\xc2\x62\x6c\xdd\x9a\x02\x09\xa9\x44\x32\x14\x77\x62\x85\x39\x21\x30\x88\x68\xdd\x5a\x9b\x53\xc0\x8d\x2c\xee\x6a\x94\xf4\x6c\x96\x24\xf7\xc2\xc0\xef\x3f\x9e\xc3\x99\xff\xfe\xfa\x15\xbe\xec\xe6\x49\x42\xff\x73\x83\x05\xca\x7b\x7c\x2f\xea\xfa\x96\x90\xe8\x44\xd5\xaa\x82\xd3\xcb\x36\x76\x35\x81\x2f\x09\xd0\x87\xfd\xf5\xed\x67\xb2\x7e\x5c\x5c\x5d\xe6\x94\x8c\x45\x6f\x9f\x0f\x66\x2a\xcb\xe1\xa3\xa3\x23\x9c\x62\xf7\x5c\x56\x90\x91\x5b\x08\x62\xe0\x9b\x33\x48\xd9\x9c\x06\xe0\xe0\xad\xc4\x06\x2d\x95\x82\x96\x00\x62\x97\xdc\x36\xb5\x74\x59\x9a\xa7\x7d\x2c\xfe\x54\xda\x40\xc6\x6e\x92\x4e\x7f\x3b\xa7\x9f\x9f\x22\x84\xbc\x46\xb5\x72\x6b\x7a\x7c\x72\x12\xc7\xe1\xcf\x98\x65\xff\xef\x66\xf4\xbb\x91\xcb\xe5\x18\x63\x97\x8c\xdf\x1c\x8a\x69\x89\xdc\x38\x47\x8b\x35\x75\x58\x9b\xe5\x58\xad\x3f\x45\x55\xaa\xb6\xae\xe3\xd8\x06\x5d\x6b\x54\xc7\x9e\x75\x46\xaa\x95\xac\xb6\xfe\x74\x2e\x9a\xa6\xde\x66\x3d\xee\xd4\x17\x2f\xcc\xca\x4e\xfa\x7a\x77\x80\xb5\xc5\x08\x6a\x36\x03\x67\xb6\x84\xd8\x68\xe3\x08\xc8\x8f\x17\x1a\xa3\xcd\x70\x84\x33\x21\x40\xab\x69\xa0\xf6\x24\xd3\x13\xc1\xe6\xbc\xd6\xab\x2c\xbd\xf9\xb8\x58\x42\xab\xc4\x2d\x9d\xa7\x79\x6d\xd0\x10\xc3\x9b\x74\x0a\x63\x8b\x47\x32\xfa\x1c\xae\xaf\xce\xaf\x42\x59\x3e\xfa\xcf\xcf\x8b\x4d\x39\x6e\xda\x57\x91\xec\x92\x84\xbd\x78\x7c\x8b\x30\x6c\x3c\xca\xe8\x7c\x3b\xd7\xb4\x1a\x35\x57\x13\xc6\xcf\x9f\xa2\x75\x32\x7a\x03\xbf\xd0\x0e\x19\xa1\x6c\x45\x81\x68\x5d\x84\xed\x88\x64\xc0\x0f\x0e\x7a\x44\x32\x84\xc3\xad\x65\xa4\xf4\x41\x9b\x3b\x9a\xa0\x05\xaa\x32\xcb\xf3\x7c\x92\xe6\x5d\x0a\x46\x3f\xd0\x2a\xc2\x62\xab\x9c\x78\xbc\xe0\xdc\x01\x1f\x0b\x6c\x7c\x58\x59\x79\x42\xbb\x26\x79\x36\x78\xd8\x39\x88\xd2\x8e\x26\xa1\x96\xe5\x10\x3d\x39\xa2\x31\xbd\xcf\xf6\xec\x11\xb1\xf6\xd6\xe5\x52\x5a\xc2\x51\xa2\x0d\xab\x8a\x08\x24\x53\x42\x2d\xfe\x13\x26\xa8\xea\xe2\xdf\x61\x03\x3e\xf9\x94\xac\xf7\xf0\x19\xd3\x8c\x1a\xb4\x48\xc0\x1e\x4c\x77\x60\x71\xe6\xe1\xd9\x0b\x3e\x46\x7a\x7d\xc2\x7f\x4d\x31\x17\x7c\x2e\x69\x83\x5d\x27\x94\xad\x8d\xca\xa7\x84\xd9\x4e\xe5\x0d\x4d\x18\x08\xf7\x74\x3e\x10\xb9\x06\x57\xd2\x92\x3e\x63\xe9\x83\x72\xa8\x27\xa0\x91\x24\x86\x3f\x9f\xb0\x82\xd9\xf1\x14\x68\x51\xdb\x0d\xd5\x67\x49\x65\x21\x16\x4b\xde\x60\x72\xbc\x59\xe6\xb6\x96\x05\x7a\xc0\x6c\x38\x3d\xf1\xaa\x56\x60\xf6\x5d\x2c\xa0\xa3\x04\x73\x0a\x21\xd4\x1f\x5d\x7a\x66\x9b\x3b\x71\x87\x71\x06\x93\x41\x75\xf6\x9f\x57\x5a\x21\x9c\x9d\x0d\xc0\xb1\x04\x1c\x35\xd4\x50\xd7\x6f\xbe\xd2\x23\x2b\x3c\x9c\x06\x69\xf2\x50\x15\x78\x9a\xc2\x09\xc4\x11\xe7\xcf\x76\x7c\x1e\x89\x64\x08\xd3\x0b\x1a\xcb\xbc\x27\xc8\x92\x57\xb7\xfc\xbf\xa1\xb5\x74\x55\xf1\x14\x72\xa7\x84\x17\x21\x67\x5a\xd6\xd0\xc0\x7c\x7c\x66\x24\x3e\x76\xcd\xc2\xd5\x30\x85\x20\xc0\xa4\x9a\xaa\x1b\xbe\x50\x23\x47\xcf\x4b\xe1\x04\x81\x8c\x55\xa7\xc1\x35\x3d\x85\x01\x65\xb4\x06\x38\xb2\x0e\xc8\xa3\x35\xd4\x47\xd6\x10\x2d\xb2\x72\xa1\x64\x39\xd4\xf0\x1f\xba\xa6\xed\xf6\x51\xe2\x74\xbf\x34\xaf\x6e\xd1\x1e\xa2\xf2\xc6\x68\xa7\xdd\xb6\xc1\xa1\xda\x0e\xeb\x74\x9c\xdc\xc3\x97\xd1\x40\xd9\xe4\xa9\x64\x73\x25\x5d\xb9\xe1\x62\xe0\xd6\x3d\xe9\xa5\xe2\x5d\xe3\x77\x9b\x38\xf7\x6e\xbf\xfd\x26\xfa\x55\xa3\x1a\xda\xda\xc5\x1b\xd6\xa3\x46\xfb\xf5\xb2\xb5\xaf\xaf\x19\xdd\x4f\x6f\xd7\xe0\xbf\xd9\xc2\xef\x87\x16\x3e\xe7\xb2\x7b\x2d\x3a\xb2\x41\x65\x9f\x11\xcc\x97\xe9\x64\x58\x06\xaf\x4b\x07\x09\x2d\x35\xbd\x11\x5d\x5e\x5d\x87\x38\x62\x14\xfc\x81\xc6\xff\x37\x81\x9e\xae\xbd\x54\xc5\x4c\x5d\xaf\xf1\xc0\xf8\x75\x6f\xca\x85\xe8\x6e\x52\x3f\x81\x61\x4d\x07\x7a\xfa\x6b\xd2\x93\xca\xf7\x57\x4f\xea\x38\xad\xfd\x6d\xd4\x07\x8a\x49\xf6\x09\xbc\x4a\xf4\x28\x42\xff\x21\xe5\x6f\x2c\x4a\x87\x1b\xf2\x67\x00\x00\x00\xff\xff\x5d\xbd\xf3\x08\xea\x0c\x00\x00")

func jsSetupJsBytes() ([]byte, error) {
	return bindataRead(
		_jsSetupJs,
		"js/setup.js",
	)
}

func jsSetupJs() (*asset, error) {
	bytes, err := jsSetupJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/setup.js", size: 3306, mode: os.FileMode(420), modTime: time.Unix(1453555064, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"js/console.js": jsConsoleJs,
	"js/registry.js": jsRegistryJs,
	"js/setup.js": jsSetupJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"js": &bintree{nil, map[string]*bintree{
		"console.js": &bintree{jsConsoleJs, map[string]*bintree{}},
		"registry.js": &bintree{jsRegistryJs, map[string]*bintree{}},
		"setup.js": &bintree{jsSetupJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


// Code generated by go-bindata.
// sources:
// js/console.js
// js/registry.js
// js/setup.js
// DO NOT EDIT!

package v8dispatcher

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _jsConsoleJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x92\x31\x6f\xdb\x30\x10\x85\x67\xe9\x57\x1c\x88\x00\x91\xe2\x40\xea\x6c\x37\x53\x11\x14\x2d\x8a\x74\x48\xb7\x20\x03\x2d\x1d\xa9\xab\x25\xd2\x20\x4f\x69\x83\x40\xff\xbd\x77\x4a\x0c\xa7\x1d\xcb\xc1\x84\xdf\x91\xdf\x7b\x8f\x76\x7b\x55\xc2\x15\xfc\x18\x28\x83\xa3\x11\x41\xf6\x3c\xef\x7f\x62\xc7\xc0\x11\x78\x40\x60\x4c\x53\x06\x1b\x7a\xe8\x62\xe8\x89\x29\x86\x0c\x3d\x3a\x0a\xd8\x03\x05\xbd\xbe\xde\xbc\xfc\xf6\xe5\xd3\xed\xdd\xfd\x6d\xc3\xbf\xf9\xf2\x1a\x7e\x0d\xd4\x0d\x8a\x3b\xda\xc4\x10\x9d\xb0\x94\x1d\xe7\xd4\xa1\x90\x7a\x94\x41\x77\xb0\x1e\x1b\x21\x28\xc4\xce\x3c\xc4\xb4\x05\x9c\xa8\x3b\x8c\x48\xa2\xb5\x65\xdb\xaa\x6b\x8e\xaf\xc9\xe6\x2c\x96\x2e\x26\xf0\xc8\x4c\xc1\xc3\x18\x3d\x60\xe0\x44\x98\x25\x0a\x58\x15\x3c\x26\x88\x61\x8d\xfe\x39\x42\xa6\x5e\x1c\xda\xb6\x3c\x61\x6e\xe0\x65\xd9\x9d\xbe\x35\xc7\x44\x81\x45\x73\x73\xe8\xb4\x59\x55\xc3\x4b\x09\xb2\x9e\x6c\x82\x29\x7b\x19\x19\xb3\x5b\x15\xf5\xad\x54\x26\x11\x3f\xec\x64\xfb\x08\x36\xf9\x79\x92\x00\xb9\x19\x31\x78\x1e\x44\xdd\x6c\x4e\x08\x5d\x8a\xd8\xdc\x9c\xcf\x3d\xd0\x23\x6c\xc0\x40\x65\x64\xe3\xe7\x23\x46\x57\xbd\x1f\xd6\x3a\xad\xe1\xcd\x72\x59\x3f\x2f\xd6\x90\x95\xa0\xea\x72\xd1\x17\xd1\xd6\x6c\x0f\xd2\xd9\x6a\x4e\xb2\x7b\xe9\x15\xe6\x69\xaf\xcd\xdd\xd9\xec\x5d\xed\x46\xef\xfc\x53\xb3\xd0\x32\x72\x38\xcb\xe0\xe1\x71\x57\x16\x82\x76\xa3\x65\x46\x79\xc9\x71\x3c\x73\x8a\xb2\xf8\x9f\xf2\x8a\x6e\x8e\x73\x1e\xfe\x6e\x78\xaa\x56\x5c\x64\x0c\x7d\xf5\xf5\xfe\xfb\x5d\x93\xe5\x27\x0c\x9e\xdc\x73\x25\xb1\x0a\x93\xb0\x43\x7a\xc2\x64\xb6\xe6\x2d\xbf\xb9\x56\x3d\xe3\x28\x7f\xcc\xa8\xba\xf4\x79\xd5\xd4\xc5\x6c\x57\xb3\xb2\x58\x6a\xc1\x2f\x7f\x02\x00\x00\xff\xff\x6a\xe4\xb2\xc2\xd4\x02\x00\x00")

func jsConsoleJsBytes() ([]byte, error) {
	return bindataRead(
		_jsConsoleJs,
		"js/console.js",
	)
}

func jsConsoleJs() (*asset, error) {
	bytes, err := jsConsoleJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/console.js", size: 724, mode: os.FileMode(420), modTime: time.Unix(1448454371, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsRegistryJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x52\x4f\x6f\x1a\x3f\x10\x3d\xb3\x9f\x62\x4e\x3f\x96\x08\xd6\xa0\xe4\x17\x45\x20\xd4\x43\x9b\x43\xa5\xb6\x97\x54\xbd\x44\x51\x65\xbc\xb3\xbb\x0e\xac\xbd\xb5\x67\x09\x28\xf0\xdd\x3b\xb3\xfc\x29\x6a\x13\x1f\x0c\xfb\xec\xf7\xe6\xf9\xcd\xa8\xab\x04\xae\xe0\x7b\x65\x23\x14\x76\x85\xc0\xbf\xb1\x5d\x3c\xa3\x21\x20\x0f\x54\x21\x10\x86\x3a\x82\x76\x39\x18\xef\x72\x4b\xd6\xbb\x08\x39\x16\xd6\x61\x0e\xd6\x09\xbd\x63\xf6\xbf\x7c\xfe\x78\xff\xed\xe1\x3e\xa3\x0d\xf5\x87\xf0\x52\x59\x53\x89\x5c\xa3\x03\x81\x2f\x58\x4b\xb4\x7d\x1b\x0c\xb2\x52\x8e\x7c\x60\x96\xba\xc4\x8c\x15\x44\x44\xb7\x54\xf9\x30\x05\xac\xad\x59\xae\xd0\x32\xa6\x92\x1f\x77\x9f\x60\x0e\xaf\xfb\x59\x92\x28\x05\x15\x51\x33\x55\x2a\x12\x33\xfd\x1a\x43\xb1\xf2\x2f\x99\xf1\xb5\xfa\xd5\x62\xec\x8c\xa9\xc9\xf8\xff\xf1\xf5\x8d\x32\x01\x35\xe1\xa8\x6c\x6d\x3e\x6a\x65\xb3\x6e\xf4\xac\xd7\x3a\x9a\x60\x1b\x12\xd9\x4c\x60\xd6\x2e\x5a\x67\x84\x9a\x0e\xe0\x35\xe9\x05\xa4\x36\x38\xe8\x6f\x8e\x6b\xd4\x6d\x37\xb2\x6d\x4f\x9f\xa7\xd5\xcf\x02\x36\x2b\x6d\x30\x55\x8f\x9b\xed\x93\x2a\x87\x7f\xc4\x8c\xa8\x01\x40\xaf\xb7\xd6\x01\x02\xd7\xf9\xaa\xa9\xca\x02\xc7\xe8\xeb\x74\x70\x35\xb9\xdd\x8d\x87\xb0\x66\xdc\xc0\x7c\xce\xf5\xfa\xf0\x81\xaf\x4d\x21\x0d\xff\x8d\x37\xd7\xbb\xf1\xe6\x6e\x30\x3b\x08\x1c\x2d\xad\x33\xf2\x0f\x14\xac\x2b\xd3\xc9\x2d\x9f\xf5\xf6\xbc\xed\x93\x9e\xe4\x72\x2a\xfb\x33\x60\x69\x23\x85\x2d\x2c\x11\x9b\x08\x36\x47\x47\xb6\xd8\xea\x05\xf7\x27\x5d\x6c\xa1\x44\x87\x81\x83\xe1\xc6\xe5\x83\x33\x2d\xb2\x46\x17\xc9\xbf\x3a\x73\x78\x1b\xdf\xed\xba\xa6\xbc\x79\x98\x39\xef\x90\x99\xad\x3b\x4e\xc9\x7b\xf7\x9a\x96\x2e\x1b\x20\x7f\x06\xdc\x83\x2e\x31\x2c\x8e\xb5\xa5\x4d\xa9\xbc\x57\xe6\xe7\x91\xf1\xa7\x23\x67\x76\xee\x16\x83\x12\x85\x24\x41\x7a\x89\x70\x80\x63\x37\xbd\x27\x75\xe0\xd7\x5b\x8a\x72\x17\x03\x3a\x9e\x41\x99\xe8\x80\x35\xcf\x11\x07\x45\x50\x04\x5f\x77\x8c\xb3\xbd\x77\x53\xc9\xba\x2a\x17\xce\x59\xb4\x9b\x1e\x71\x2e\x20\x9f\x9d\xdd\xfe\xe5\xfc\x22\x94\x93\xfd\xc3\x63\xf6\xbf\x03\x00\x00\xff\xff\x6a\x0f\xff\x77\x8a\x03\x00\x00")

func jsRegistryJsBytes() ([]byte, error) {
	return bindataRead(
		_jsRegistryJs,
		"js/registry.js",
	)
}

func jsRegistryJs() (*asset, error) {
	bytes, err := jsRegistryJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/registry.js", size: 906, mode: os.FileMode(420), modTime: time.Unix(1448454371, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsSetupJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xb4\x55\x51\x6f\xdb\x36\x10\x7e\x96\x7e\xc5\x4d\x08\x50\x39\xf1\x68\x74\x7b\x19\xec\xf9\x69\x0d\x8a\x0e\x5b\x02\x34\x43\x5f\x3c\xa3\x60\xa4\xb3\xcd\x58\x26\x05\x92\xb6\x63\x14\xfe\xef\xbb\xa3\x44\x49\x4e\x03\xac\x05\xb6\x20\x80\x8d\xe3\xf1\xe3\x77\xf7\x7d\x77\x9e\x5c\xa7\x70\x0d\x7f\x6d\x94\x83\x95\xaa\x10\xe8\xd3\xed\x1f\x9f\xb0\xf0\xe0\x0d\xf8\x0d\x82\x47\xbb\x73\x20\x75\x09\x85\xd1\xa5\xf2\xca\x68\x07\x25\xae\x94\xc6\x12\x94\xe6\xeb\xe1\xe6\x9b\x3f\x3e\xfc\x76\x7b\xf7\x70\x2b\xfc\xb3\x7f\x33\x86\xe3\x46\x15\x1b\x86\xab\xa5\xf5\x60\x56\x84\xc5\xd8\x66\x6f\x0b\x24\xa4\x12\xe9\xa0\xd8\xca\x35\x0a\x42\x60\x10\xb9\xf7\x1b\x63\xa7\x80\x3b\x55\x6c\x2b\x54\x14\x9b\xa4\xe9\x64\xd2\x90\x2b\x64\x55\x3d\xd2\x85\x40\x10\x3d\xac\x8c\x85\x0d\x91\xaa\x94\x5e\xc3\x6a\xaf\x0b\xe6\x15\xb2\xa8\x10\x6b\x76\xf0\x9e\xd8\x5b\xa9\xdd\x0a\xad\x25\xa2\xd2\xc1\xef\x0f\xf7\x77\x82\x01\x3f\x78\x68\x11\xe9\x20\x26\xef\x1d\x23\x65\x47\x63\xb7\x68\xc5\x03\xea\x32\x17\x42\x8c\x32\xd1\x50\xb0\xe6\x48\x4d\x80\x87\x93\xf6\xf2\xf9\xd6\x5a\x7a\x1e\x9f\x0b\xac\xc3\xb3\x6a\x15\x3a\xe5\xbc\x65\x0c\xea\x1b\xd5\xec\x42\x2f\xb5\xf1\x70\x90\x95\x2a\xbb\xd7\xd3\x2b\x8b\xc5\x21\x8f\x94\xf3\x9d\x5b\x8f\xe0\x4b\x0a\xf4\x77\x90\x16\xcc\xe3\x13\xcc\x9b\xe4\x00\x12\xce\x67\xe1\x98\x1b\xb8\xa0\x73\xe1\xb0\x22\x7d\x8c\x5d\x0a\x59\xd7\xd5\x29\xe7\x83\x31\xdf\x14\xd2\xae\xdd\x28\x3d\xd3\x85\xff\xba\x71\xf4\xba\xf4\x54\x72\xcd\xce\x90\x60\xd1\xef\xad\xe6\xd2\xf6\xf8\x3d\x3d\xa5\xfe\x15\xff\x4f\x5f\xe1\x63\x43\x89\x2f\x04\xc2\x16\x6b\x8b\x0e\x09\x37\x60\x99\x06\x6b\x48\x3c\xc6\xbe\x6a\x47\xaf\x53\xe0\xfb\x7d\x5a\x25\x69\xc2\x87\x34\x2c\x1e\x9f\x3d\x25\xb0\x3c\xb3\x34\xa1\x62\x72\xd6\x88\x60\x51\x1d\xd0\xc2\x0f\x73\xc8\xf8\x2c\x63\xcc\x24\x82\x6a\xb9\x43\x47\xa3\x81\x8e\xae\x0e\xf3\x85\xab\x2b\xe5\xf3\x4c\x64\xad\x1f\x12\x96\x32\xe7\x3b\x8a\x52\xdf\xce\xe8\xe3\xd7\xc1\x75\x51\xa1\x5e\xfb\x0d\x85\x6f\x6e\x22\xeb\xf0\x4a\xcf\xac\xfd\xb6\xe8\x2f\x2d\xd4\x72\xd9\xa2\x9f\x53\xfe\x67\x91\xee\xdf\xdd\x37\x3d\xc2\x5e\x9b\xae\x09\x4d\x43\x3f\x85\x7e\xf6\x88\xdf\x60\x53\x6a\x49\x2b\x46\xe8\x60\x23\xb2\x5a\x9d\xf2\x01\x62\xef\xe5\x68\xe3\xcf\xa5\x22\xa6\xbe\x59\x2d\x7b\x37\x30\x1b\xd9\x83\x93\xc8\x4c\x9d\xe5\x3b\x7b\x07\xf3\x1e\xc9\xca\x16\xd7\xca\xd1\x46\xc3\x32\x68\x7c\xe1\xff\x0b\xf8\x4e\xf4\x8f\xb8\x82\xc9\xf5\x18\x98\x33\x6d\x24\x08\x62\x71\xe1\x21\x30\x87\xc5\x52\xb8\x4a\x15\x28\x18\x22\xa7\xe0\x7e\x47\x9e\x73\xa3\x20\x57\x81\xf9\x5b\x2e\x34\x18\x22\xb2\x9a\xc3\xa7\x5f\xde\x89\x88\xff\xb9\xa1\x64\x4f\xc2\xcb\x2d\x0e\x9f\x1d\x35\x9e\x79\x3d\x59\x1b\x4d\xfd\x9e\x77\xa8\x81\x56\x72\x55\x53\x13\xc9\x23\xda\xf4\xb5\xb3\x4b\x2c\xd2\x34\xa3\x2e\x70\x9a\xdd\x0c\x5f\x20\x6a\xad\x08\xb3\xa0\x76\x44\x1b\x2a\xd6\xee\x94\x34\xc8\xb0\x36\x5f\x0b\xa0\x48\x41\x79\x90\xae\xb0\xaa\xf6\x03\x19\xde\x9b\x8b\x81\x8a\xd3\x3c\x08\xb7\xe6\xe1\x05\x40\xf5\xfc\xa8\x55\xd5\x0e\x26\xe5\x35\x93\xcc\x34\x83\x47\xba\xe5\x72\x21\xdb\x80\x4e\x1e\x53\xc7\x10\x27\x66\x0c\x3b\xa4\xdf\x94\xf2\x8e\xec\x4d\x1a\x5e\x48\x38\x99\x04\x51\x14\x6f\x39\x6a\xd0\xbc\xe3\x44\xf6\x93\xce\x68\xca\x49\x38\x29\x64\xd1\x72\x08\xe3\xe8\xfc\x36\x4e\xe1\xdf\x9a\xc7\x90\x13\x62\xcf\x9f\xdc\x14\xb2\x9b\xf6\xf6\x2c\xe1\xbf\xe1\x79\xc0\x68\xae\x9c\x5f\x6c\x90\x2f\x94\x99\x24\x59\xa4\x9d\x4d\xfb\x0a\x38\xde\x14\x41\xd1\xbe\x9a\x10\x8f\x62\xd1\x49\x57\x3b\xc7\x9d\x6f\x82\x1a\x8f\x10\x36\x6a\x4e\x66\xe4\x58\x78\xf6\xdc\x8c\x37\xbd\xbc\xc8\xb8\x21\xd9\xf2\x1b\x4c\xfc\x73\xbb\x72\xae\x1c\xff\x2e\xbe\x98\x57\x82\x1a\xd1\x39\x39\x84\xad\xfa\x27\x3a\x47\xbf\xea\xbc\xec\x07\x5d\x85\x41\x38\xef\xf5\x89\x2b\x22\xb8\x97\xdd\x26\x4a\xe9\x25\xb7\xe4\xa2\x21\xf0\xa2\x23\xf1\x1a\x1f\xc4\xef\xe1\x20\x14\x44\xc1\x7f\xab\xe7\x27\x9a\xad\xf3\x6b\x94\x45\x6d\x8d\x37\xfe\x54\x63\x43\xc2\x1b\x2e\x76\xda\xbb\x83\x98\xc2\xeb\x6b\xab\xa3\x3f\x9a\xc1\x99\xa0\xff\x09\x00\x00\xff\xff\x66\xec\xa4\x83\x5a\x09\x00\x00")

func jsSetupJsBytes() ([]byte, error) {
	return bindataRead(
		_jsSetupJs,
		"js/setup.js",
	)
}

func jsSetupJs() (*asset, error) {
	bytes, err := jsSetupJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/setup.js", size: 2394, mode: os.FileMode(420), modTime: time.Unix(1453444888, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"js/console.js": jsConsoleJs,
	"js/registry.js": jsRegistryJs,
	"js/setup.js": jsSetupJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"js": &bintree{nil, map[string]*bintree{
		"console.js": &bintree{jsConsoleJs, map[string]*bintree{}},
		"registry.js": &bintree{jsRegistryJs, map[string]*bintree{}},
		"setup.js": &bintree{jsSetupJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


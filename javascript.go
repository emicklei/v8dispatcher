// Code generated by go-bindata.
// sources:
// js/console.js
// js/registry.js
// js/setup.js
// DO NOT EDIT!

package v8dispatcher

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _jsConsoleJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x52\xc1\x6e\xdb\x30\x0c\x3d\xcf\x5f\x41\x18\x03\x6a\x27\x85\xbd\x73\xb3\x9e\x86\x62\xd8\x30\x74\x87\xee\x56\xf4\xa0\xd8\x94\xcc\xc5\x96\x02\x89\xea\x56\x14\xf9\xf7\x91\x4e\x03\xbb\xd7\xe9\x60\xc2\xef\x89\xef\xf1\xd1\x6e\x37\x05\x6c\xe0\xd7\x40\x09\x2c\x8d\x08\x52\x53\xde\xff\xc6\x8e\x81\x03\xf0\x80\xc0\x18\xa7\x04\xc6\xf7\xd0\x05\xdf\x13\x53\xf0\x09\x7a\xb4\xe4\xb1\x07\xf2\xda\x3e\x77\x5e\xfd\xf8\xf6\xe5\xee\xfe\xe1\xae\xe1\xbf\x7c\x75\x0d\x7f\x06\xea\x06\x95\x3b\x9a\xc8\x10\xac\x68\xa9\x76\xc8\xb1\x43\x51\xea\x51\x88\xee\x60\x1c\x36\xa2\xa0\x22\x26\xf3\x10\xe2\x0d\xe0\x44\xdd\x61\x44\x12\xac\x2d\xda\x56\x5d\x53\x38\x4f\x96\x93\x58\xda\x10\xc1\x21\x33\x79\x07\x63\x70\x80\x9e\x23\x61\x92\x51\xc0\x28\xe0\x30\x42\xf0\xf3\xe8\x5f\x03\x24\xea\xc5\xa1\x6d\x8b\x8b\xcc\x2d\xbc\x9e\x76\x97\xb7\xe6\x18\xc9\xb3\x60\x36\xfb\x4e\x93\x55\x35\xbc\x16\x20\xe7\xd9\x44\x98\x92\x13\xaa\x2c\x77\x33\xa2\xbe\x95\xc2\x24\xe0\xa7\x9d\x94\xcf\x60\xa2\xcb\x93\x0c\x90\x9a\x11\xbd\xe3\x41\xd0\xed\xf6\x22\xa1\x47\x25\xb6\xb7\xcb\xbd\x47\x7a\x82\x2d\x94\x50\x95\x52\xf8\xe5\x88\xc1\x56\x6b\xb2\x56\xb6\x86\x37\xcb\xd3\xfc\xfc\x38\x0f\x59\x89\x54\x5d\x9c\x0a\x5d\x89\xc6\x66\x73\x90\xd0\x46\x07\x25\xb3\x97\x60\x3e\x4f\x7b\x8d\x6e\x17\xb7\x55\xee\x46\x7b\x56\x39\xa1\xdd\x2c\xf7\x64\xd3\xb0\x0e\x2e\x44\x92\xcb\x8f\x4f\xe7\x31\xc4\xd1\x8e\x86\x19\x65\xc3\xe3\xb8\xb4\x7d\xf8\xff\xbd\xa8\x43\x73\xcc\x69\x78\x9f\xfe\x5d\xec\x84\xbe\xaf\xbe\x3f\xfc\xbc\x6f\x92\x7c\x61\xef\xc8\xbe\x54\x8b\x42\x19\xb1\x43\x7a\xc6\x58\xde\x40\xf9\x16\xb2\xbc\x5e\xe8\x84\xa3\xfc\xc4\x61\xa6\x25\xfb\x9a\x52\x73\x81\xb5\x9c\xfd\x6a\x31\x3e\x15\xff\x02\x00\x00\xff\xff\x5e\x37\xa5\xd2\x0b\x03\x00\x00")

func jsConsoleJsBytes() ([]byte, error) {
	return bindataRead(
		_jsConsoleJs,
		"js/console.js",
	)
}

func jsConsoleJs() (*asset, error) {
	bytes, err := jsConsoleJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/console.js", size: 779, mode: os.FileMode(420), modTime: time.Unix(1453531099, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsRegistryJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x52\x4d\x6f\xda\x40\x10\xbd\xfb\x57\xcc\xa9\x18\x04\x5e\x50\xd2\x28\x02\xa1\x1e\xda\x1c\x2a\xb5\xbd\xa4\xea\x25\x8a\xaa\x65\x3d\xb6\x37\xe0\x5d\x77\x77\x4c\x40\x81\xff\xde\xd9\x8d\x4d\x2d\xa5\xd9\xc3\x18\xe6\xe3\xcd\xbc\x37\x23\x26\x09\x4c\xe0\x67\xa5\x3d\x14\x7a\x87\xc0\x5f\xdf\x6e\x9e\x50\x11\x90\x05\xaa\x10\x08\x5d\xed\x41\x9a\x1c\x94\x35\xb9\x26\x6d\x8d\x87\x1c\x0b\x6d\x30\x07\x6d\x42\x79\xac\x1c\x7d\xfb\xfa\xf9\xee\xc7\xfd\x5d\x46\x07\x1a\x4d\xe1\xb9\xd2\xaa\x0a\x70\x8d\x74\x04\xb6\x60\xac\x80\x6d\x5b\xa7\x90\x91\x72\xe4\x80\xda\xca\x12\x33\x46\x08\x20\xb2\xa5\xca\xba\x25\x60\xad\xd5\x76\x87\x9a\x7d\x22\xd9\x4b\x07\xbf\x6e\xbf\xc0\x3a\xda\xd3\x09\x5e\xce\xab\x24\x11\x02\x2a\xa2\x66\x29\x84\x27\x06\xb1\x7b\x74\xc5\xce\x3e\x67\xca\xd6\xe2\x4f\x8b\x3e\xce\x28\x16\xf3\x8f\xf3\xab\x6b\xa1\x1c\x4a\xc2\x59\xd9\xea\x7c\xd6\x06\xa3\xcd\xec\x49\xee\xa5\x57\x4e\x37\x94\x30\x6e\x16\xdc\xdc\xa2\x68\x8d\x0a\xa5\xe9\x18\x5e\x12\xe0\xe7\x90\x5a\x67\x60\x74\xe8\xde\x2c\x9a\xeb\x60\x8e\xfd\xdf\xfe\x8d\x32\x87\xcd\x4e\x2a\x4c\xc5\xc3\xe1\xf8\x28\xca\xe9\x3f\x3c\xd5\x03\x86\x17\x28\x39\xee\xf6\x5d\x52\x95\x39\xd6\xd5\xd6\xdc\x70\x02\x8b\x1b\x38\xc1\x7c\x7a\xc9\x8b\xb9\x9c\xa7\x60\xbd\xe6\x11\x46\xf0\x89\xcb\x96\x90\x3a\xf8\x00\xf3\xc3\x55\x48\x3e\xdc\x8e\x57\x97\xfc\x6e\xd8\x7d\x46\xf6\x9e\x9c\x36\x65\xba\xb8\xe9\xc2\x67\xfe\x9e\xa3\x6c\xfd\x48\xbf\x1d\x96\xda\x93\x3b\xc2\x16\xb1\xf1\xa0\x73\x34\xa4\x8b\xa3\xdc\xf0\x26\xd3\xcd\x11\x4a\x34\xe8\x58\x37\x5e\x71\x3e\xbe\x94\x79\xc6\x88\x8a\xbd\xc5\x59\xc7\xd5\xfc\x37\x96\x19\x6b\x90\x13\x5a\xd3\x9d\xcd\x7b\x79\x4d\x4b\xc3\x35\x84\x1f\xbd\x72\x51\x35\x2c\x5e\x0f\x21\x2e\x2c\xed\xc8\x85\xbb\x7a\xe0\xd0\x63\x57\xba\x1a\xae\x8e\xfd\x3d\x75\x92\x5b\xec\xdc\x3e\x1e\x76\xdf\x07\x98\xae\x26\x1f\x72\xd1\xa1\xe1\xf3\x0c\xc7\xee\xb0\xe6\xbb\x62\x65\x08\x0a\x67\xeb\x58\x71\x19\xf4\x5d\x19\xb2\xd8\x65\xc0\x81\x41\x87\x14\x82\x9f\xc3\x97\x99\xdf\x52\x18\x88\x34\xe0\xf1\x4a\xec\x9c\xfc\x0d\x00\x00\xff\xff\xc0\x47\x25\x7f\xaf\x03\x00\x00")

func jsRegistryJsBytes() ([]byte, error) {
	return bindataRead(
		_jsRegistryJs,
		"js/registry.js",
	)
}

func jsRegistryJs() (*asset, error) {
	bytes, err := jsRegistryJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/registry.js", size: 943, mode: os.FileMode(420), modTime: time.Unix(1453531107, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsSetupJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x56\xdf\x6f\xe3\x36\x0c\x7e\xf7\x5f\xc1\x19\x07\x9c\xd3\x06\xce\x7e\xbc\x0c\xcd\x8a\x3d\x5c\xbb\xe1\x0e\x5b\x0b\x5c\x8a\xbd\x14\xc1\xa0\xda\x74\xa2\xab\x23\x19\x92\xdc\x36\xb8\xcb\xff\x3e\x52\xb6\x6c\x35\x97\x35\x1b\x76\x1b\xb0\x3c\x24\x81\x29\x7e\x24\x3f\x92\x9f\x3c\x3b\x49\xe0\x04\x6e\xd6\xd2\x42\x25\x6b\x04\xfa\xb5\xed\xdd\x07\x2c\x1c\x38\x0d\x6e\x8d\xe0\xd0\x6c\x2c\x08\x55\x42\xa1\x55\x29\x9d\xd4\xca\x42\x89\x95\x54\x58\x82\x54\xec\xee\x3d\x5f\xff\xf2\xf6\xcd\xe5\xd5\xe2\x32\x77\x4f\xee\xf5\x14\x1e\xd7\xb2\x58\x33\x5c\x23\x8c\x03\x5d\x11\x16\x63\xeb\xd6\x14\x48\x48\x25\x92\xa1\xb8\x17\x2b\xcc\x09\x81\x41\x44\xeb\xd6\xda\x9c\x01\x6e\x64\x71\x5f\xa3\xa4\x67\xb3\x24\x79\x10\x06\x7e\xfb\xfe\x02\xce\xfd\xf7\xa7\x4f\xf0\x71\x37\x4f\x12\xfa\x9f\x1b\x2c\x50\x3e\xe0\x1b\x51\xd7\x77\x84\x44\x27\xaa\x56\x15\x9c\x5e\xb6\xb1\xab\x09\x7c\x4c\x80\x3e\xec\xaf\xef\x3e\x90\xf5\xdd\xe2\xfa\x2a\xa7\x64\x2c\x7a\xfb\x7c\x30\x53\x59\x0e\x9f\x1c\x1d\xe1\x14\xbb\xe7\xb2\x82\x8c\xdc\x42\x10\x03\x5f\x9d\x43\xca\xe6\x34\x00\x07\x6f\x25\x36\x68\xa9\x14\xb4\x04\x10\xbb\xe4\xb6\xa9\xa5\xcb\xd2\x3c\xed\x63\xf1\xa7\xd2\x06\x32\x76\x93\x74\xfa\xeb\x39\xfd\xfc\x10\x21\xe4\x35\xaa\x95\x5b\xd3\xe3\xd3\xd3\x38\x0e\x7f\xc6\x2c\xfb\x7f\xb7\xa3\xdf\xad\x5c\x2e\xc7\x18\xbb\x64\xfc\xe6\x50\x4c\x4b\xe4\xc6\x39\x5a\xac\xa9\xc3\xda\x2c\xc7\x6a\xfd\x29\xaa\x52\xb5\x75\x1d\xc7\x36\xe8\x5a\xa3\x3a\xf6\xac\x33\x52\xad\x64\xb5\xf5\xa7\x73\xd1\x34\xf5\x36\xeb\x71\xa7\xbe\x78\x61\x56\x76\xd2\xd7\xbb\x03\xac\x2d\x46\x50\xb3\x19\x38\xb3\x25\xc4\x46\x1b\x47\x40\x7e\xbc\xd0\x18\x6d\x86\x23\x9c\x09\x01\x5a\x4d\x03\x75\x20\x99\x9e\x08\x36\xe7\xb5\x5e\x65\xe9\xed\xbb\xc5\x12\x5a\x25\xee\xe8\x3c\xcd\x6b\x83\x86\x18\xde\xa4\x53\x18\x5b\x3c\x92\xd1\xe7\x70\x73\x7d\x71\x1d\xca\xf2\xd1\x7f\xdc\x2f\x36\xe5\xb8\x69\x5f\x45\xb2\x4b\x12\xf6\xe2\xf1\x2d\xc2\xb0\xf1\x28\xa3\xf3\xed\x5c\xd3\x6a\xd4\x5c\x4d\x18\x3f\x7f\x8a\xd6\xc9\xe8\x0d\xfc\x4c\x3b\x64\x84\xb2\x15\x05\xa2\x75\x11\xb6\x23\x92\x01\xdf\x3a\xe8\x11\xc9\x10\x0e\xb7\x96\x91\xd2\x47\x6d\xee\x69\x82\x16\xa8\xca\x2c\xcf\xf3\x49\x9a\x77\x29\x18\xfd\x48\xab\x08\x8b\xad\x72\xe2\xe9\x92\x73\x07\x7c\x2a\xb0\xf1\x61\x65\xe5\x09\xed\x9a\xe4\xd9\xe0\x61\xe7\x20\x4a\x3b\x9a\x84\x5a\x96\x43\xf4\xe4\x15\x8d\xe9\x43\x76\x60\x8f\x88\xb5\x2f\x5d\x2e\xa5\x25\x1c\x25\xda\xb0\xaa\x88\x40\x32\x25\xd4\xe2\xdf\x61\x82\xaa\x2e\xfe\x1d\x36\xe0\xbd\x4f\xc9\x7a\x0f\x9f\x31\xcd\xa8\x41\x8b\x04\xec\xc1\x74\x07\x16\x67\x1e\x9e\x7d\xc6\xc7\x48\xaf\x4f\xf8\xcf\x29\xe6\x82\x2f\x24\x6d\xb0\xeb\x84\xb2\xb5\x51\xf9\x94\x30\xdb\xa9\xbc\xa1\x09\x03\xe1\x9e\xce\x47\x22\xd7\xe0\x4a\x5a\xd2\x67\x2c\x7d\x50\x0e\xf5\x0c\x34\x92\xc4\xf0\xe7\x3d\x56\x30\x3b\x99\x02\x2d\x6a\xbb\xa1\xfa\x2c\xa9\x2c\xc4\x62\xc9\x1b\x4c\x8e\xb7\xcb\xdc\xd6\xb2\x40\x0f\x98\x0d\xa7\x27\x5e\xd5\x0a\xcc\xbe\x89\x05\x74\x94\x60\x4e\x21\x84\xfa\xbd\x4b\xcf\x6c\x73\x27\xee\x31\xce\x60\x32\xa8\xce\xe1\xf3\x4a\x2b\x84\xf3\xf3\x01\x38\x96\x80\x57\x0d\x35\xd4\xf5\x9b\xaf\xf4\xc8\x0a\x0f\xa7\x41\x9a\x3c\x54\x05\x9e\xa5\x70\x0a\x71\xc4\xf9\xde\x8e\xcf\x23\x91\x0c\x61\x7a\x41\x63\x99\xf7\x04\x59\xf2\xea\x96\xff\x57\xb4\x96\xae\x2a\x9e\x42\xee\x94\xf0\x22\xe4\x4c\xcb\x1a\x1a\x98\x8f\xcf\x8c\xc4\xc7\xae\x59\xb8\x1a\xa6\x10\x04\x98\x54\x53\x75\xc3\x17\x6a\xe4\xe8\x79\x29\x9c\x20\x90\xb1\xea\x34\xb8\xa6\x67\x30\xa0\x8c\xd6\x00\x47\xd6\x01\x79\xb4\x86\xfa\xc8\x1a\xa2\x45\x56\x2e\x94\x2c\xc7\x1a\xfe\x5d\xd7\xb4\xdd\x21\x4a\x9c\xee\x97\xe6\xc5\x2d\x3a\x40\x54\xde\x18\xed\xb4\xdb\x36\x38\x54\xdb\x61\x9d\x8d\x93\x7b\xfc\x32\x1a\x28\x9b\x3c\x97\x6c\xae\xa4\x2b\x37\x5c\x0c\xdc\xba\x67\xbd\x54\xbc\x6b\xfc\x6e\x13\xe7\xde\xed\xb7\xdf\x44\xbf\x6a\x54\x43\x5b\xbb\x78\xc3\x7a\xd4\x68\xbf\x3e\x6f\xed\xcb\x6b\x46\xf7\xd3\x97\x6b\xf0\x5f\x6c\xe1\xb7\x43\x0b\xf7\xb9\xec\x5e\x8b\x5e\xd9\xa0\xb2\x7b\x04\xf3\x65\x3a\x19\x96\xc1\xeb\xd2\x51\x42\x4b\x4d\x6f\x44\x57\xd7\x37\x21\x8e\x18\x05\x7f\xa0\xf1\xff\x4d\xa0\xa7\xeb\x20\x55\x31\x53\x37\x6b\x3c\x32\x7e\xdd\x9b\x72\x21\xba\x9b\xd4\x4f\x60\x58\xd3\x81\x9e\xfe\x9a\xf4\xa4\xf2\xfd\xd5\x93\x3a\x4e\x6b\x7f\x1b\xf5\x81\x62\x92\x7d\x02\x2f\x12\x3d\x8a\xd0\x4f\x41\xb5\xfe\x3b\xea\x23\x71\x3a\x7c\x19\x34\xad\xcb\xf6\xf3\x9b\xfc\x13\xfd\x3a\xde\xbb\x3f\x02\x00\x00\xff\xff\x72\xe0\x8f\x63\x15\x0d\x00\x00")

func jsSetupJsBytes() ([]byte, error) {
	return bindataRead(
		_jsSetupJs,
		"js/setup.js",
	)
}

func jsSetupJs() (*asset, error) {
	bytes, err := jsSetupJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/setup.js", size: 3349, mode: os.FileMode(420), modTime: time.Unix(1453629676, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func getAsset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func getMustAsset(name string) []byte {
	a, err := getAsset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func getAssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func getAssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"js/console.js":  jsConsoleJs,
	"js/registry.js": jsRegistryJs,
	"js/setup.js":    jsSetupJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func getAssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"js": &bintree{nil, map[string]*bintree{
		"console.js":  &bintree{jsConsoleJs, map[string]*bintree{}},
		"registry.js": &bintree{jsRegistryJs, map[string]*bintree{}},
		"setup.js":    &bintree{jsSetupJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func doRestoreAsset(dir, name string) error {
	data, err := getAsset(name)
	if err != nil {
		return err
	}
	info, err := getAssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func doRestoreAssets(dir, name string) error {
	children, err := getAssetDir(name)
	// File
	if err != nil {
		return doRestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = doRestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

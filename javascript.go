// Code generated by go-bindata.
// sources:
// js/console.js
// js/registry.js
// js/setup.js
// DO NOT EDIT!

package v8dispatcher

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _jsConsoleJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x9c\x52\xc1\x6e\xdb\x30\x0c\x3d\xcf\x5f\x41\x18\x03\x6a\x27\x85\xbd\x73\xb3\x9e\x86\x62\xd8\x30\x74\x87\xee\x56\xf4\xa0\xd8\x94\xcc\xc5\x96\x02\x89\xea\x56\x14\xf9\xf7\x91\x4e\x03\xbb\xd7\xe9\x60\xc2\xef\x89\xef\xf1\xd1\x6e\x37\x05\x6c\xe0\xd7\x40\x09\x2c\x8d\x08\x52\x53\xde\xff\xc6\x8e\x81\x03\xf0\x80\xc0\x18\xa7\x04\xc6\xf7\xd0\x05\xdf\x13\x53\xf0\x09\x7a\xb4\xe4\xb1\x07\xf2\xda\x3e\x77\x5e\xfd\xf8\xf6\xe5\xee\xfe\xe1\xae\xe1\xbf\x7c\x75\x0d\x7f\x06\xea\x06\x95\x3b\x9a\xc8\x10\xac\x68\xa9\x76\xc8\xb1\x43\x51\xea\x51\x88\xee\x60\x1c\x36\xa2\xa0\x22\x26\xf3\x10\xe2\x0d\xe0\x44\xdd\x61\x44\x12\xac\x2d\xda\x56\x5d\x53\x38\x4f\x96\x93\x58\xda\x10\xc1\x21\x33\x79\x07\x63\x70\x80\x9e\x23\x61\x92\x51\xc0\x28\xe0\x30\x42\xf0\xf3\xe8\x5f\x03\x24\xea\xc5\xa1\x6d\x8b\x8b\xcc\x2d\xbc\x9e\x76\x97\xb7\xe6\x18\xc9\xb3\x60\x36\xfb\x4e\x93\x55\x35\xbc\x16\x20\xe7\xd9\x44\x98\x92\x13\xaa\x2c\x77\x33\xa2\xbe\x95\xc2\x24\xe0\xa7\x9d\x94\xcf\x60\xa2\xcb\x93\x0c\x90\x9a\x11\xbd\xe3\x41\xd0\xed\xf6\x22\xa1\x47\x25\xb6\xb7\xcb\xbd\x47\x7a\x82\x2d\x94\x50\x95\x52\xf8\xe5\x88\xc1\x56\x6b\xb2\x56\xb6\x86\x37\xcb\xd3\xfc\xfc\x38\x0f\x59\x89\x54\x5d\x9c\x0a\x5d\x89\xc6\x66\x73\x90\xd0\x46\x07\x25\xb3\x97\x60\x3e\x4f\x7b\x8d\x6e\x17\xb7\x55\xee\x46\x7b\x56\x39\xa1\xdd\x2c\xf7\x64\xd3\xb0\x0e\x2e\x44\x92\xcb\x8f\x4f\xe7\x31\xc4\xd1\x8e\x86\x19\x65\xc3\xe3\xb8\xb4\x7d\xf8\xff\xbd\xa8\x43\x73\xcc\x69\x78\x9f\xfe\x5d\xec\x84\xbe\xaf\xbe\x3f\xfc\xbc\x6f\x92\x7c\x61\xef\xc8\xbe\x54\x8b\x42\x19\xb1\x43\x7a\xc6\x58\xde\x40\xf9\x16\xb2\xbc\x5e\xe8\x84\xa3\xfc\xc4\x61\xa6\x25\xfb\x9a\x52\x73\x81\xb5\x9c\xfd\x6a\x31\x3e\x15\xff\x02\x00\x00\xff\xff\x5e\x37\xa5\xd2\x0b\x03\x00\x00")

func jsConsoleJsBytes() ([]byte, error) {
	return bindataRead(
		_jsConsoleJs,
		"js/console.js",
	)
}

func jsConsoleJs() (*asset, error) {
	bytes, err := jsConsoleJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/console.js", size: 779, mode: os.FileMode(420), modTime: time.Unix(1453705378, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsRegistryJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x52\x4d\x6f\xdb\x30\x0c\xbd\xfb\x57\x10\x3d\x2c\x6e\x91\xd8\x09\xda\x15\x45\x82\x60\x87\xad\x87\x01\xdb\x2e\x1d\x76\x29\x8a\x41\x91\x69\x5b\x4d\x2c\x79\x12\x95\x26\x48\xf2\xdf\x47\xa9\x76\x66\xa0\xab\x0e\x74\xc2\x8f\x47\xbe\x47\xe6\x57\x09\x5c\xc1\xcf\x5a\x39\x28\xd5\x06\x81\xbf\xce\xaf\x9e\x51\x12\x90\x01\xaa\x11\x08\x6d\xe3\x40\xe8\x02\xa4\xd1\x85\x22\x65\xb4\x83\x02\x4b\xa5\xb1\x00\xa5\x43\x79\xac\x1c\x7d\xfb\xfa\xf9\xfe\xc7\xc3\x7d\x46\x3b\x1a\x8d\xe1\xa5\x56\xb2\x0e\x70\xad\xb0\x04\xa6\x64\xac\x80\x6d\xbc\x95\xc8\x48\x05\x72\x40\xae\x45\x85\x19\x23\x04\x10\xe1\xa9\x36\x76\x0e\xd8\x28\xb9\xde\xa0\x62\x5f\x9e\x24\x5b\x61\xe1\xd7\xdd\x17\x58\x46\x7b\x3c\xc2\xe1\xc2\x78\x1e\x29\x4c\x7c\x31\x0f\x98\xa7\x45\x92\xe4\x39\xd4\x44\xed\x3c\xcf\x1d\x31\xaa\xd9\xa2\x2d\x37\xe6\x25\x93\xa6\xc9\xff\x78\x74\x71\xe8\x7c\x36\xfd\x38\xbd\xbe\xc9\xa5\x45\x41\x38\xa9\xbc\x2a\x26\x3e\x18\xa5\x27\xcf\x62\x2b\x9c\xb4\xaa\xa5\x84\xfb\x64\xc1\xcd\x2d\x4b\xaf\x65\x28\x4d\x2f\xe1\x90\x00\x3f\x8b\xe4\xad\x86\xd1\xae\x7b\x93\x68\x6e\x82\xd9\xf7\x7f\xfb\x37\xca\x2c\xb6\x1b\x21\x31\xcd\x1f\x77\xfb\xa7\xbc\x1a\xff\xc3\x93\x3d\x60\x78\x81\xa2\xe5\x6e\xdf\x05\xd5\x99\x65\xa1\x4d\xc3\x0d\xaf\x60\x76\x0b\x47\x98\x8e\xcf\x79\x31\x97\xf3\x24\x2c\x97\x3c\xc2\x08\x3e\x71\xd9\x1c\x52\x0b\x1f\x60\xba\xbb\x0e\xc9\xbb\xbb\xcb\xc5\x39\xbf\x1b\x76\x9b\x91\x79\x20\xab\x74\x95\xce\x6e\xbb\xf0\x89\xbf\xa7\x28\x5b\x3f\xd2\x6f\x8b\x95\x72\x64\xf7\xb0\x46\x6c\x1d\xa8\x02\x35\xa9\x72\x2f\x56\xbc\xda\x74\xb5\x87\x0a\x35\x5a\xd6\x8d\x77\x5e\x5c\x9e\xcb\x1c\x63\x44\xc5\xde\xe2\x2c\xe1\xc0\xab\xf9\x6f\x2c\xd3\x46\x23\x27\x78\xdd\xdd\xd1\x7b\x79\xad\xa7\xe1\x1a\xc2\x8f\x5e\xb9\xa8\x1a\x96\xaf\x87\x11\x17\x96\x76\xe4\xc2\x51\x3c\x72\xe8\xa9\x2b\x5d\x0c\x57\xc7\xfe\x9e\x3a\x89\x35\x76\x6e\x17\x2f\xbd\xef\x03\x4c\x57\x91\x0b\xb9\x68\x51\xf3\xbd\x86\xeb\xb7\xd8\xf0\x5d\xb1\x32\x04\xa5\x35\x4d\xac\x38\x0f\xfa\xae\x0c\x59\xec\x32\xe0\xc0\xa0\x43\x0a\xc1\xcf\xe1\xf3\xcc\x6f\x29\x0c\x44\x1a\xf0\x78\x25\x76\x4a\xfe\x06\x00\x00\xff\xff\xf1\x4c\x19\xd9\xc0\x03\x00\x00")

func jsRegistryJsBytes() ([]byte, error) {
	return bindataRead(
		_jsRegistryJs,
		"js/registry.js",
	)
}

func jsRegistryJs() (*asset, error) {
	bytes, err := jsRegistryJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/registry.js", size: 960, mode: os.FileMode(420), modTime: time.Unix(1453881879, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _jsSetupJs = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x56\x4d\x6f\xe3\x36\x13\x3e\xbf\xfe\x15\xf3\x0a\x01\x56\x4e\x0c\xb9\x1f\x97\x22\x69\xd0\xc3\x26\x2d\x76\xd1\x26\xc0\x26\xd8\x8b\x61\x14\xb4\x34\x92\xb9\x91\x49\x81\xa4\x92\x18\x45\xfe\x7b\x67\x28\x51\xa2\xbd\xde\x24\x45\xb7\x05\xea\x43\x62\x98\x33\xcf\x3c\xf3\xcc\x07\x39\x3f\x9e\xc0\x31\xdc\xae\xa5\x85\x52\xd6\x08\xf4\xdf\xb6\xab\x4f\x98\x3b\x70\x1a\xdc\x1a\xc1\xa1\xd9\x58\x10\xaa\x80\x5c\xab\x42\x3a\xa9\x95\x85\x02\x4b\xa9\xb0\x00\xa9\xd8\xdd\x7b\xbe\xf9\xf5\xdd\xdb\xcb\xab\x9b\xcb\xcc\x3d\xba\x37\x33\x78\x58\xcb\x7c\xcd\x70\x8d\x30\x0e\x74\x49\x58\x8c\xad\x5b\x93\x23\x21\x15\x48\x07\xf9\x9d\xa8\x30\x23\x04\x06\x11\xad\x5b\x6b\x73\x0a\xb8\x91\xf9\x5d\x8d\x92\x7e\x9b\x4f\x26\x1f\x7f\xb8\xc8\x0c\xe6\x28\xef\xf1\xad\xa8\xeb\x15\xf9\xc0\x39\x94\xad\xca\x99\x48\xba\xb1\xd5\x14\xfe\x98\x00\x7d\xee\x85\x01\xbd\xfa\x44\xa7\xef\x6f\xae\xaf\x32\x0a\x6b\xd1\x9f\x9f\x0d\xc7\x94\x80\xc3\x47\x47\x26\x4c\xa6\xfb\x5d\x96\x90\x92\x5b\x08\x62\xe0\xff\xe7\x90\xf0\x71\x12\x80\x83\xb7\x12\x1b\xb4\x44\x1a\x2d\x01\xc4\x2e\x99\x6d\x6a\xe9\xd2\x24\x4b\xfa\x58\xfc\x29\xb5\x81\x94\xdd\x24\x59\x7f\x73\x46\xff\x7e\x8c\x10\xb2\x1a\x55\xe5\xd6\xf4\xf3\xc9\x49\x1c\x87\x3f\x23\xcb\xfe\xdb\x62\xf4\x5b\xc8\xe5\x72\x8c\xf1\x34\x19\xff\x72\x28\x96\x25\x72\x63\x8e\x16\x6b\xaa\xa5\x36\xcb\x31\x5b\x6f\x45\x59\xaa\xb6\xae\xe3\xd8\x06\x5d\x6b\x54\xa7\x9e\x75\x46\xaa\x4a\x96\x5b\x6f\x9d\x89\xa6\xa9\xb7\x69\x8f\x3b\xf3\xc9\x0b\x53\xd9\x69\x9f\xef\x13\x60\x6d\x31\x82\x9a\xcf\xc1\x99\x2d\x21\x36\xda\x38\x02\xf2\x8d\x84\xc6\x68\x33\x98\x30\x13\x02\xb4\x9a\x5a\xe7\x00\x99\x5e\x08\x3e\xce\x6a\x5d\xa5\xc9\xe2\xfd\xcd\x12\x5a\x25\x56\x64\x4f\x9d\xd9\xa0\x21\x85\x37\xc9\x0c\xc6\x12\x8f\x62\xf4\x1c\x6e\xaf\x2f\xae\x43\x5a\x3e\xfa\x4f\xfb\xc9\x26\x1c\x37\xe9\xb3\x98\x3c\x4d\x26\xec\xc5\x8d\x9a\x87\x66\xe3\xa6\x45\xe7\xcb\xb9\xa6\x21\xa8\x39\x9b\xd0\x7e\xde\x8a\x06\xc7\xe8\x0d\xfc\x42\xd3\x62\x84\xb2\x25\x05\xa2\xc1\x10\xb6\x13\x92\x01\xdf\x39\xe8\x11\xe9\x20\x18\xb7\x96\x91\x92\x07\x6d\xee\xa8\x83\x6e\x50\x15\x69\x96\x65\xd3\x24\xeb\x28\x18\xfd\x40\x43\x07\x37\x5b\xe5\xc4\xe3\x25\x73\x07\x7c\xcc\xb1\xf1\x61\x65\xe9\x05\xed\x8a\xe4\xd5\xe0\x66\xe7\x20\x4a\x3b\xea\x84\x5a\x16\x43\xf4\xc9\x11\xb5\xe9\x7d\x7a\x60\x8e\x48\xb5\xaf\x9d\x2e\xd1\x12\x8e\x88\x36\xbc\x3f\x44\x10\x99\x08\xb5\xf8\x57\x94\xa0\xac\xf3\x7f\x46\x0d\xf8\xe0\x29\x59\xef\xe1\x19\x53\x8f\x1a\xb4\x48\xc0\x1e\x4c\x77\x60\x31\xf3\xf0\xdb\x67\x7a\x8c\xf2\x7a\xc2\x5f\x96\x98\x13\xbe\x90\x34\xc1\xae\x5b\x89\xad\x8d\xd2\x27\xc2\x7c\x4e\xe9\x0d\x45\x18\x04\xf7\x72\x3e\x90\xb8\x06\x2b\x69\x69\x13\x63\xe1\x83\x72\xa8\x1d\xd0\x68\x25\x86\x2f\x1f\xb0\x84\xf9\xf1\x0c\x68\x50\xdb\x0d\xe5\x67\x69\x9f\x42\xbc\x2c\x79\x82\xc9\x71\xb1\xcc\x6c\x2d\x73\xf4\x80\xe9\x60\x3d\xf5\x5b\x2d\xc7\xf4\xdb\x78\x81\x8e\x2b\x98\x29\x84\x50\xbf\x77\xf4\xcc\x36\x73\xe2\x0e\x63\x06\xd3\x61\xeb\x1c\xb6\x57\x5a\x21\x9c\x9f\x0f\xc0\xf1\x0a\x38\x6a\xa8\xa0\xae\x9f\x7c\xa5\x47\x55\xb8\x39\x0d\x52\xe7\xa1\xca\xf1\x34\x81\x13\x88\x23\x9e\xed\xcd\xf8\x59\xb4\x24\x43\x98\x7e\xa1\xf1\x9a\xf7\x02\x59\xf2\xea\x86\xff\x37\xb4\x96\x2e\x25\xee\x42\xae\x94\xf0\x4b\xc8\x99\x96\x77\xe8\x20\x7d\x6c\x34\x2a\x1f\xfb\xa6\xe1\x6e\x98\x41\xd8\xc0\xb4\x36\x55\xd7\x7d\x21\x49\x0e\x9f\x15\xc2\x09\x02\x19\xd3\x4e\x82\x6b\x72\x0a\x03\xca\x78\x1a\xe0\xe8\x74\x40\x1e\x4f\x43\x82\x74\x1a\xa2\x45\xa7\x9c\x29\x9d\xbc\x54\xf1\xef\xbb\xaa\x3d\x1d\xd2\xc4\xe9\x7e\x6a\x9e\x1d\xa3\x43\x4a\x65\x8d\xd1\x4e\xbb\x6d\x83\x43\xba\x1d\xd8\xe9\xd8\xbb\x2f\x5f\x47\x83\x66\xd3\xdd\xa5\xcd\xa9\x74\xf9\x86\xab\x81\x8b\xb7\x53\x4d\xc5\xd3\xc6\xef\x98\x98\x7c\x37\xe1\x7e\x16\xfd\xb0\x51\x12\x6d\xed\xe2\x19\xeb\x51\xa3\x09\xfb\xbc\xb6\xcf\x0f\x1a\xdd\x50\x5f\xaf\xc2\xaf\xac\xe1\x77\x43\x0d\xf7\xb5\xec\x1e\x46\x47\x36\xec\xd9\x3d\x81\xf9\x3a\x9d\x0e\xe3\xe0\x37\xd3\x8b\x82\x16\x9a\xde\x44\x57\xd7\xb7\x21\x8e\x18\x57\xfe\x20\xe3\x7f\x5b\x40\x2f\xd7\x41\xa9\x62\xa5\x6e\xd7\xf8\x42\xfb\x75\xaf\xe2\x5c\x74\x77\xa9\xef\xc0\x30\xa7\x3b\xd7\x0a\xdf\x94\x5e\x55\xbe\xc2\x7a\x55\xc7\x76\xed\x2f\xa4\x3e\xd2\x8e\xcc\x9e\xc2\xb3\x52\x8f\x7b\xe8\xe7\xb0\xb8\xfe\x3d\xf1\xa3\xfd\x74\xf8\x42\x68\x5a\x97\xee\xf3\x9b\xfe\x9d\x15\xf6\xba\xea\xf1\x9b\x47\x14\x85\x9d\xd3\x1e\xab\xfd\x13\x3f\x5a\x0e\xd4\x9e\xdc\xd1\x46\xfa\xc7\xa7\xec\x2a\x51\xd5\x7a\x25\x6a\xb0\xb9\x6e\xc6\x46\x67\x98\x48\xfc\xe0\x73\x45\xef\xf7\x99\x74\xf6\x23\xe3\xb1\xb6\xff\x63\x63\xdd\xd2\x85\xce\xaf\xaf\x45\x6c\xb7\x24\x80\x60\x1a\xd8\x55\xe8\x0e\x2d\xad\xd7\xf3\xaa\xbe\xcc\xcb\xd3\xe9\x3b\xec\x19\x56\x44\xe5\xcf\x00\x00\x00\xff\xff\x4a\xac\x77\x8e\x2b\x0e\x00\x00")

func jsSetupJsBytes() ([]byte, error) {
	return bindataRead(
		_jsSetupJs,
		"js/setup.js",
	)
}

func jsSetupJs() (*asset, error) {
	bytes, err := jsSetupJsBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "js/setup.js", size: 3627, mode: os.FileMode(420), modTime: time.Unix(1453881978, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"js/console.js": jsConsoleJs,
	"js/registry.js": jsRegistryJs,
	"js/setup.js": jsSetupJs,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"js": &bintree{nil, map[string]*bintree{
		"console.js": &bintree{jsConsoleJs, map[string]*bintree{}},
		"registry.js": &bintree{jsRegistryJs, map[string]*bintree{}},
		"setup.js": &bintree{jsSetupJs, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

